version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: forex_trading
      POSTGRES_USER: forex
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-forex_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U forex"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Risk Management Agent
  risk-manager:
    build: .
    command: python -m BayloZzi.main --service risk-manager
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models:ro
    restart: unless-stopped

  # Chart Analysis Agent
  chart-analyzer:
    build: .
    command: python -m BayloZzi.main --service chart-analyzer
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models:ro
    restart: unless-stopped

  # Trend Identification Agent
  trend-identifier:
    build: .
    command: python -m BayloZzi.main --service trend-identifier
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models:ro
    restart: unless-stopped

  # News Sentiment Agent
  news-sentiment:
    build: .
    command: python -m BayloZzi.main --service news-sentiment
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # Economic Factors Agent
  economic-factors:
    build: .
    command: python -m BayloZzi.main --service economic-factors
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # Data Manager Service
  data-manager:
    build: .
    command: python -m BayloZzi.main --service data-manager
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      - risk-manager
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: forex-network